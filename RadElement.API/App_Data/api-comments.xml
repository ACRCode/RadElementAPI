<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RadElement.API</name>
    </assembly>
    <members>
        <member name="T:RadElement.API.AuthorizationRequirements.UserIdExistsRequirementHandler">
            <summary>
            Filter that checks if the User specified by the UserName exists in Assist
            </summary>
        </member>
        <member name="F:RadElement.API.AuthorizationRequirements.UserIdExistsRequirementHandler.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:RadElement.API.AuthorizationRequirements.UserIdExistsRequirementHandler.authorizationConfig">
            <summary>
            The authorization configuration
            </summary>
        </member>
        <member name="F:RadElement.API.AuthorizationRequirements.UserIdExistsRequirementHandler.userAccountsConfig">
            <summary>
            The user accounts configuration
            </summary>
        </member>
        <member name="M:RadElement.API.AuthorizationRequirements.UserIdExistsRequirementHandler.#ctor(Microsoft.Extensions.Logging.ILogger{RadElement.API.AuthorizationRequirements.UserIdExistsRequirementHandler},RadElement.Core.Infrastructure.AuthorizationConfig,RadElement.Core.Infrastructure.UserAccounts)">
            <summary>
            Initializes the insatnce of the class
            </summary>
            <param name="logger">Represents the logger</param>
            <param name="authorizationConfig"></param>
             /// <param name="userAccountsConfig"></param>
        </member>
        <member name="M:RadElement.API.AuthorizationRequirements.UserIdExistsRequirementHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,RadElement.API.AuthorizationRequirements.UserIdRequirement)">
            <summary>
            Check if  requirement has been handled
            </summary>
        </member>
        <member name="T:RadElement.API.AuthorizationRequirements.UserIdRequirement">
            <summary>
            Represensts the requirement for user Id 
            </summary>
        </member>
        <member name="P:RadElement.API.AuthorizationRequirements.UserIdRequirement.UserIdClaim">
            <summary>
            Gets or sets the UserIdClaim
            </summary>
        </member>
        <member name="M:RadElement.API.AuthorizationRequirements.UserIdRequirement.#ctor(System.String)">
            <summary>
            Initializes the isnstance of the class
            </summary>
            <param name="userIdClaim">Represents the claim</param>
        </member>
        <member name="T:RadElement.API.Controllers.BaseController">
            <summary>
            Base  class for all controllers
            </summary>
        </member>
        <member name="P:RadElement.API.Controllers.BaseController.LoggerInstance">
            <summary>
            Instance of the Logger
            </summary>
        </member>
        <member name="T:RadElement.API.Controllers.ElementController">
            <summary>
            Endpoint for elements controller
            </summary>
            <seealso cref="T:RadElement.API.Controllers.BaseController" />
        </member>
        <member name="F:RadElement.API.Controllers.ElementController.radElementService">
            <summary>
            The RAD element service
            </summary>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.#ctor(RadElement.Core.Services.IElementService,Microsoft.Extensions.Logging.ILogger{RadElement.API.Controllers.ElementController})">
            <summary>
            Intializes Rad element service and logger.
            </summary>
            <param name="radElementService"></param>
            <param name="logger"></param>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.GetElements">
            <summary>
            Fetches all the elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.GetElementByElementId(System.String)">
            <summary>
            Fetch a element by element identifier.
            </summary>
            <param name="elementId">The element identifier.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.GetElementsBySetId(System.String)">
            <summary>
            Fetch the elements by set identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.SearchElements(RadElement.Core.DTO.SearchKeyword)">
            <summary>
            Searches the element with provided keyword.
            </summary>
            <param name="searchKeyword">The search keyword.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.CreateElement(System.String,RadElement.Core.DTO.ElementType,RadElement.Core.DTO.CreateUpdateElementOld)">
            <summary>
            Creates a element under specific set identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <param name="elementType">Type of the element.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.CreateElement(System.String,RadElement.Core.DTO.CreateElement)">
            <summary>
            Creates a element under specific set identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.UpdateElement(System.String,System.String,RadElement.Core.DTO.ElementType,RadElement.Core.DTO.CreateUpdateElementOld)">
            <summary>
            Updates the element based on set identifier and element identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <param name="elementId">The element identifier.</param>
            <param name="elementType">Type of the element.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.UpdateElement(System.String,System.String,RadElement.Core.DTO.UpdateElement)">
            <summary>
            Updates the element based on set identifier and element identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <param name="elementId">The element identifier.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementController.DeleteElement(System.String,System.String)">
            <summary>
            Deletes the element based on set identifier and element identifier..
            </summary>
            <param name="setId">The set identifier.</param>
            <param name="elementId">The element identifier.</param>
            <returns></returns>
        </member>
        <member name="T:RadElement.API.Controllers.ElementSetController">
            <summary>
            Endpoint for elements set controller
            </summary>
            <seealso cref="T:RadElement.API.Controllers.BaseController" />
        </member>
        <member name="F:RadElement.API.Controllers.ElementSetController.elementSetService">
            <summary>
            The element set service
            </summary>
        </member>
        <member name="M:RadElement.API.Controllers.ElementSetController.#ctor(RadElement.Core.Services.IElementSetService,Microsoft.Extensions.Logging.ILogger{RadElement.API.Controllers.ElementSetController})">
            <summary>
            Initializes a new instance of the <see cref="T:RadElement.API.Controllers.ElementSetController"/> class.
            </summary>
            <param name="elementSetService">The element set service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:RadElement.API.Controllers.ElementSetController.GetSets">
            <summary>
            Fetches all the sets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementSetController.GetSetBySetId(System.String)">
            <summary>
            Fetches the set by set identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementSetController.SearchSets(System.String)">
            <summary>
            Searches the set with provided keyword.
            </summary>
            <param name="searchKeyword">The search keyword.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementSetController.CreateSet(RadElement.Core.DTO.CreateUpdateSet)">
            <summary>
            Creates a set.
            </summary>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementSetController.UpdateSet(System.String,RadElement.Core.DTO.CreateUpdateSet)">
            <summary>
            Updates a set by set identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <param name="content">The content.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.ElementSetController.DeleteSet(System.String)">
            <summary>
            Removes a set by set identifier.
            </summary>
            <param name="setId">The set identifier.</param>
            <returns></returns>
        </member>
        <member name="T:RadElement.API.Controllers.HelloWorldController">
            <summary>
            Endpoint for hello worls controller
            </summary>
            <seealso cref="T:Microsoft.AspNetCore.Mvc.Controller" />
        </member>
        <member name="M:RadElement.API.Controllers.HelloWorldController.GetHelloWorld">
            <summary>
            Method used to check if service is running
            </summary>
            <returns>Returns "Hello World" </returns>
        </member>
        <member name="M:RadElement.API.Controllers.HelloWorldController.PostHelloWorld">
            <summary>
            Method used to check if service is running
            </summary>
            <returns>Returns "Hello World" </returns>
        </member>
        <member name="T:RadElement.API.Controllers.OrganizationController">
            <summary>
            Endpoint for elements set controller
            </summary>
            <seealso cref="T:RadElement.API.Controllers.BaseController" />
        </member>
        <member name="F:RadElement.API.Controllers.OrganizationController.organizationService">
            <summary>
            The organization service
            </summary>
        </member>
        <member name="M:RadElement.API.Controllers.OrganizationController.#ctor(RadElement.Core.Services.IOrganizationService,Microsoft.Extensions.Logging.ILogger{RadElement.API.Controllers.OrganizationController})">
            <summary>
            Initializes a new instance of the <see cref="T:RadElement.API.Controllers.OrganizationController" /> class.
            </summary>
            <param name="organizationService">The organization service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:RadElement.API.Controllers.OrganizationController.GetOrganizations">
            <summary>
            Gets the organizations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.OrganizationController.GetOrganization(System.Int32)">
            <summary>
            Gets the organization.
            </summary>
            <param name="organizationId">The organization identifier.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.OrganizationController.SearchOrganization(RadElement.Core.DTO.SearchKeyword)">
            <summary>
            Searches the organizations.
            </summary>
            <param name="searchKeyword">The search keyword.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.OrganizationController.CreateOrganization(RadElement.Core.DTO.CreateUpdateOrganization)">
            <summary>
            Creates the organization.
            </summary>
            <param name="organization">The organization.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.OrganizationController.UpdateOrganization(System.Int32,RadElement.Core.DTO.CreateUpdateOrganization)">
            <summary>
            Updates the organization.
            </summary>
            <param name="organizationId">The organization identifier.</param>
            <param name="organization">The organization.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.OrganizationController.DeleteOrganization(System.Int32)">
            <summary>
            Deletes the organization.
            </summary>
            <param name="organizationId">The organization identifier.</param>
            <returns></returns>
        </member>
        <member name="T:RadElement.API.Controllers.PersonController">
            <summary>
            Endpoint for elements set controller
            </summary>
            <seealso cref="T:RadElement.API.Controllers.BaseController" />
        </member>
        <member name="F:RadElement.API.Controllers.PersonController.personService">
            <summary>
            The person service
            </summary>
        </member>
        <member name="M:RadElement.API.Controllers.PersonController.#ctor(RadElement.Core.Services.IPersonService,Microsoft.Extensions.Logging.ILogger{RadElement.API.Controllers.PersonController})">
            <summary>
            Initializes a new instance of the <see cref="T:RadElement.API.Controllers.PersonController" /> class.
            </summary>
            <param name="personService">The person service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:RadElement.API.Controllers.PersonController.GetPersons">
            <summary>
            Gets the persons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.PersonController.GetPerson(System.Int32)">
            <summary>
            Gets the person.
            </summary>
            <param name="personId">The person identifier.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.PersonController.SearchPerson(RadElement.Core.DTO.SearchKeyword)">
            <summary>
            Searches the persons.
            </summary>
            <param name="searchKeyword">The search keyword.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.PersonController.CreatePerson(RadElement.Core.DTO.CreateUpdatePerson)">
            <summary>
            Creates the person.
            </summary>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.PersonController.UpdatePerson(System.Int32,RadElement.Core.DTO.CreateUpdatePerson)">
            <summary>
            Updates the person.
            </summary>
            <param name="personId">The person identifier.</param>
            <param name="person">The person.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Controllers.PersonController.DeletePerson(System.Int32)">
            <summary>
            Deletes the person.
            </summary>
            <param name="personId">The person identifier.</param>
            <returns></returns>
        </member>
        <member name="T:RadElement.API.Filters.AuthorizationHeaderOperationFilter">
            <summary>
            Provides the filter for authorization headers
            </summary>
            <seealso cref="T:Swashbuckle.AspNetCore.SwaggerGen.IOperationFilter" />
        </member>
        <member name="M:RadElement.API.Filters.AuthorizationHeaderOperationFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Applies the specified operation.
            </summary>
            <param name="operation">The operation.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:RadElement.API.Filters.GlobalExceptionFilter">
            <summary>
            Handles all the exceptions
            </summary>
        </member>
        <member name="M:RadElement.API.Filters.GlobalExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILogger{RadElement.API.Filters.GlobalExceptionFilter})">
            <summary>
            Ini
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:RadElement.API.Filters.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Method is called when an exception occurs
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:RadElement.API.Hash.SecurePasswordHasher">
            <summary>
            Performing the hshing of password
            </summary>
        </member>
        <member name="F:RadElement.API.Hash.SecurePasswordHasher.SaltSize">
            <summary>
            Size of salt.
            </summary>
        </member>
        <member name="F:RadElement.API.Hash.SecurePasswordHasher.HashSize">
            <summary>
            Size of hash.
            </summary>
        </member>
        <member name="M:RadElement.API.Hash.SecurePasswordHasher.Hash(System.String,System.Int32)">
            <summary>
            Creates a hash from a password.
            </summary>
            <param name="password">The password.</param>
            <param name="iterations">Number of iterations.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:RadElement.API.Hash.SecurePasswordHasher.Hash(System.String)">
            <summary>
            Creates a hash from a password with 10000 iterations
            </summary>
            <param name="password">The password.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:RadElement.API.Hash.SecurePasswordHasher.IsHashSupported(System.String)">
            <summary>
            Checks if hash is supported.
            </summary>
            <param name="hashString">The hash.</param>
            <returns>Is supported?</returns>
        </member>
        <member name="M:RadElement.API.Hash.SecurePasswordHasher.Verify(System.String,System.String)">
            <summary>
            Verifies a password against a hash.
            </summary>
            <param name="password">The password.</param>
            <param name="hashedPassword">The hash.</param>
            <returns>Could be verified?</returns>
        </member>
        <member name="T:RadElement.API.Models.ErrorResponse">
            <summary>
            Contains the details of the error
            </summary>
        </member>
        <member name="M:RadElement.API.Models.ErrorResponse.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initialzes the instance of the class
            </summary>
            <param name="message">Contains the error message</param>
            <param name="validationErrors">Contains the list of error message</param>
        </member>
        <member name="P:RadElement.API.Models.ErrorResponse.Message">
            <summary>
            Gets or sets the message
            </summary>
        </member>
        <member name="P:RadElement.API.Models.ErrorResponse.ValidationErrors">
            <summary>
            Gets or sets the validation error
            </summary>
        </member>
        <member name="T:RadElement.API.Program">
            <summary>
            Entry point for the application
            </summary>
        </member>
        <member name="M:RadElement.API.Program.Main(System.String[])">
            <summary>
            Entry point method
            </summary>
            <param name="args">Represents the command line arguments</param>
        </member>
        <member name="M:RadElement.API.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates the web host
            </summary>
            <param name="args">Represents the command line arguments</param>
            <returns>TReturns the web host</returns>
        </member>
        <member name="T:RadElement.API.Startup">
            <summary>
            Program starts here
            </summary>
        </member>
        <member name="P:RadElement.API.Startup.Configuration">
            <summary>
            Returns the configuration
            </summary>
        </member>
        <member name="P:RadElement.API.Startup.HostingEnvironment">
            <summary>
            Represents the hosting environment
            </summary>
        </member>
        <member name="F:RadElement.API.Startup.swaggerSchemaName">
            <summary>
            The swagger schema name
            </summary>
        </member>
        <member name="M:RadElement.API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Called when application starts up
            </summary>
            <param name="configuration"></param>
            <param name="hostingEnvironment">Represents the hosting environment</param>
        </member>
        <member name="M:RadElement.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures the services.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="M:RadElement.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Configures the specified application.
            </summary>
            <param name="app">The application.</param>
            <param name="env">The env.</param>
        </member>
        <member name="M:RadElement.API.Startup.GetKey(System.String,System.String)">
            <summary>
            Gets the key.
            </summary>
            <param name="keyFilePath">The key file path.</param>
            <param name="password">The password.</param>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Startup.GetSwaggerSecurityScheme">
            <summary>
            Gets the swagger security scheme.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RadElement.API.Startup.GetMimeTypesForCompression">
            <summary>
            Gets the MIME types for compression.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
